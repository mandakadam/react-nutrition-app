{"version":3,"sources":["Nutrition.js","App.js","serviceWorker.js","index.js"],"names":["Nutrition","useState","serving","setServing","title","setTitle","ingrArr","setIngrArr","ingr","setIngr","response","setResponse","loading","setLoading","useEffect","postData","a","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","json","className","type","value","onChange","e","target","disabled","onClick","length","map","item","index","key","id","array","splice","deleteDiet","then","resp","console","log","Object","entries","error","calories","totalWeight","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f6ac5d8.chunk.js","sourcesContent":["import React,  {useState, useEffect} from 'react';\r\n\r\nconst Nutrition = () =>{\r\n    const [serving, setServing] = useState(\"10\");\r\n    const [title, setTitle] = useState(\"Analyze Meal Nutrition\")\r\n    const [ingrArr, setIngrArr] = useState([\"1 Orange Juice\", \"3 tablespoons olive oil\", \"2 Carrots\"]);\r\n    const [ingr, setIngr] = useState('');\r\n    const [response, setResponse] = useState({});\r\n    const [loading, setLoading] = useState('false');\r\n\r\n    const addIngr = () =>{\r\n       setIngrArr([...ingrArr, ingr]);\r\n    }\r\n    useEffect(() => {\r\n        setIngr('')\r\n    }, [ingrArr]);\r\n\r\n   \r\n\r\n    const deleteDiet = (id) =>{\r\n        var array = [...ingrArr]; // make a separate copy of the array\r\n        var index = array[id];\r\n        if (index !== -1) {\r\n          array.splice(index, 1);\r\n          setIngrArr(array)\r\n        }\r\n    }\r\n\r\n    const app_id = \"b66eab84\";\r\n    const app_key = \"c5be16564187193ee7130c3586a5611c\";\r\n  \r\n    var url = 'https://api.edamam.com/api/nutrition-details?app_id=' + app_id + '&app_key=' + app_key;\r\n\r\n    const postData = async function(url = '', data = {}) {\r\n        // Default options are marked with *\r\n        const response = await fetch(url, {\r\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n          credentials: 'same-origin', // include, *same-origin, omit\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n          redirect: 'follow', // manual, *follow, error\r\n          referrerPolicy: 'no-referrer', // no-referrer, *client\r\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n        });\r\n        return await response.json(); // parses JSON response into native JavaScript objects\r\n   }\r\n  \r\n\r\n    const makeCorsRequest = (e) => {\r\n        setLoading(\"true\")\r\n        postData(url, {\r\n            \"title\": title,\r\n            \"yield\": `About ${serving} serving`,\r\n            \"ingr\": ingrArr\r\n          })\r\n          .then(function(resp) {\r\n              console.log(resp)\r\n            setResponse(resp);\r\n            setLoading(\"false\")\r\n          })\r\n    }\r\n\r\n\r\n    const getDietList = () =>{\r\n        if(ingrArr.length) { \r\n            return(\r\n            <ul className=\"ingrList\">\r\n                {\r\n                    ingrArr.map((item, index)=>{\r\n                        return <li key={index}>{item} <span className=\"deleteBtn\" onClick={()=>deleteDiet(index)}>x</span></li>\r\n                    })\r\n                }\r\n            </ul>\r\n            )\r\n        }\r\n        else{\r\n            return( <h3>No Diet List added</h3>)\r\n        }\r\n    }\r\n\r\n    const getResult = () => {\r\n        if(Object.entries(response).length > 0 && !response.error) { \r\n            return(\r\n                <div className=\"result\">\r\n                    <ul>\r\n                    <li>Total calories:  {response.calories}</li>\r\n                    <li>Total total weight:    {response.totalWeight}</li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n         if(response.error) { \r\n            return(\r\n                <div className=\"result\">\r\n                   <div class=\"errorMsg\"> Something went wrong, Please try adding Proper Ingredients list.\r\n                   For example:</div>\r\n                   <ul>\r\n                   <li>1 cup orange juice</li>\r\n                   <li>3 tablespoons olive oil</li>\r\n                   <li>2 carrots</li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    \r\n    return(<div className=\"form-wrap\">\r\n            <div className=\"form-group\">\r\n                <label>Title</label>\r\n                <input className=\"form-control\" type=\"text\" value={title} onChange={(e)=>setTitle(e.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label>Serving For</label>\r\n                <input className=\"form-control\" type=\"number\" value={serving} onChange={(e)=>setServing(e.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <label>Ingredients list</label>\r\n                <div>\r\n                <input className=\"form-control\" type=\"text\" value={ingr} onChange={(e)=>setIngr(e.target.value)} />\r\n                <button className=\"addDietBtn\" disabled={ingr===\"\"} onClick={addIngr}>Add diet</button>\r\n                {\r\n                    getDietList()\r\n                }\r\n                </div>\r\n\r\n            </div>\r\n\r\n            \r\n            <div className=\"form-group\">\r\n            <label></label>\r\n                <button className=\"submitBtn\" onClick={makeCorsRequest}>Analyze</button>\r\n            </div>\r\n\r\n            <div>\r\n                   {\r\n                       (loading === \"true\") ? (<div className=\"result\">Loading ...</div>) : getResult()\r\n                      \r\n                   }\r\n            </div>\r\n    </div>)\r\n}\r\n\r\nexport default Nutrition;","import React from 'react';\nimport Nutrition from './Nutrition'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Nutrition />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}